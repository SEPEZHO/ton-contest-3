#include "imports/stdlib.fc";
(int) tlena(tuple t) asm "TLEN";
forall X -> X tpopa(tuple t) asm "TPOP";

(int) getPrecedence(int ch) {
  if ((ch == 43) | (ch == 45)){
    return (1);
  }
  if ((ch == 42) | (ch == 47)) {
    return (2);
  }
  return (0);
}

(tuple) revert_tuple(tuple tup) {
  var (int tuple_length) = tlena(tup);
  int counter = 0;
  tuple reverted_tuple = empty_tuple();
  while (counter < tuple_length) {
    var (int v) = tup~tpopa();
    reverted_tuple~tpush(v);
    counter += 1;
  }
  return reverted_tuple;
}

(tuple) revert_ls_tuple(tuple tup) {
  tuple reverted_tuple = null();
  while (~(null?(tup))){
    reverted_tuple = cons(tup~list_next(), reverted_tuple);
  }
  return reverted_tuple;
}

(int) ls_tlen(tuple tup) {
  int i = 0;
  while (~(null?(tup))){
    tup~list_next();
    i += 1;
  }
  return i;
}

(tuple) tuple_rm_item(tuple cacheNumbers, int place){
  tuple cacheBetweenOperators = empty_tuple();
  var (int len) = tlena(cacheNumbers);
  int c = 0;
  while (c < len) {
    int action = cacheNumbers.at(c);
    if (c == place){
    } else {
      cacheBetweenOperators~tpush(action);
    }
    c += 1;  
  }
  return (cacheBetweenOperators);
}

(int) calcWithOperator(int ch, int a, int b){
  int res = 0;
  if (ch == 43) { ;; +
    res = a + b;
  }
  if (ch == 45){ ;; -
    res = a - b;
  }
  if (ch == 42){ ;; *
    res = a * b;
  }
  if (ch == 47){ ;; /
    res = a / b;
  }
  ;; 40 - (
  ;; 41 - )
  return res;
}

(int) default_pow(int num, int pow) {
  int result = 1;
  int counter = 0;
  while (counter < pow) {
    result *= num;
    counter += 1;
  }
  return result;
}


(int) make_reverse_calculating(tuple cacheBetweenOperators) {
  var (int r) = tlena(cacheBetweenOperators);
  int index = -1;
  int c = 0;
  int sum = 0;
  while (c < r) {
    index = c;
    var (int q) = cacheBetweenOperators~tpopa();
    var rqwe = default_pow(10, index);
    sum += (q * rqwe);
    c += 1;
  }
  return sum;
}

() sendMessage(slice add, int op, int query_id, int res) impure {
  cell mssage = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(add)
    .store_coins(0)
    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
    .store_uint(1, 1)
    .store_ref(begin_cell().store_uint(op, 32).store_uint(query_id, 64).store_uint(res, 927).end_cell())
    .end_cell();
  send_raw_message(mssage, 64);
}